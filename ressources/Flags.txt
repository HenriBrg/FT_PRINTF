                              ===================
                              Les Flags de Printf
                              ===================

                      % [flags][width][.precision][size]type
                         ^^^^^


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Le flag '0' >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Champ d'application :

Remplie l'espace restant par des 0
Si pas de nombre (tab->width) après le '0', rien de change

Exemple 1 : printf(" %010d \n", 42) ==> 0000000042
            (42 prend 2 espace, il y aura donc 8 zéros)


Si 0 et - apparaissent, 0 est ignoré
Si il y a une précision (ex : .5), et que le la variable est un entier (i, u, x, X, o, d) le 0 est ignoré

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Le flag '-' >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Champ d'application : TOUT

Décale le résultat à gauche (left-justify) selon le nombre associé
ET selon la taille de l'output du %

Exemple 1 : printf("aa%-4daaa\n", 42); ==> aa42  aaa$
            (42 = taille de 2) et on a -4, donc il reste 2 places qui
            seront mise à droite de l'output (ce qui donne un left-justify)


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Le flag '+' >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Champ d'application : entier (i, u, x, X, o, d)

S'il s'agit d'un type signé (donc int uniquement je suppose)
Affiche un + ou - avant l'int passé en paramètre, selon son signe
Exemple : printf(" %+d \n", -42)


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Le flag ' ' >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Champ d'application : entier (i, u, x, X, o, d)

Affiche un espace avant si la valeur est positive, sinon le '-' naturel reste

Exemple : printf(" % d \n", 42) ==> [espace]42
          printf(" % d \n", -42) ==> -42

Son effet est annulé si l'on trouve un '+' ()

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Le flag '#' >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Ajoute un préfixe :

Champ d'application : avec les convertisseurs o x X
#o : 0
#x : 0x
#X : 0X

Avec les convertisseurs c d i u s, il est IGNORE

Exemple : printf("%#o\n", 42); ===> 052
          printf("%#d\n", 42); ===> 42 + warning # ignoré
